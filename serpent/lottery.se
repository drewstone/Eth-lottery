data players[](commitment, choice, has_revelead, eliminated)
data matches[](left,right,bit)
data winners[]
data match_count
data tournament_pot
data reveal_count
data timer_start

def init:
	tournament_pot = 0
	reveal_count = 0
	match_count = 0

def add_player(player_commitment):
	if self.test_callstack() != 1 or self.players[msg.sender].eliminated: return(-1)
	if msg.value >= 1000:
		if (msg.value - 1000 > 0):
			send(0, msg.sender, msg.value-1000)
		self.players[msg.sender].commitment = player_commitment

		if self.matches[match_count].bit = 1:
			self.matches[match_count].right = msg.sender
			self.matches[match_count++].bit = 0
		else:
			self.matches[match_count].left = msg.sender
			self.matches[match_count++].bit = 1
		return (0)
	else:
		if msg.value > 0:
			send(0, msg.sender, msg.value)
		return(-1)

def open(choice, nonce):
	if self.test_callstack() != 1: return(-1)
	if self.players[msg.sender].eliminated:
		return (-1)
	else:
		if not self.players[msg.sender].has_revealed and sha3([msg.sender, choice, nonce], items=3) == self.players[msg.sender].commitment:
			reveal_count++
			players[msg.sender].hasRevealed = 1
			players[msg.sender].choice = choice
			if not self.timer_start:
				self.timer_start = block.number
			return (0)
		else:
			return(-1)

def check():
	ctr = 0
	while ctr < self.match_count:
		temp_one = matches[ctr].left
		temp_two = matches[ctr].right
		value = addmod(self.players[temp_one.commitment], self.players[temp_two].commitment, 2) + 1
		if value == 1:
			self.players[matches[ctr].right].eliminated = 1
			self.winners[ctr] = matches[ctr].left
			ctr++
		else:
			self.players[matches[ctr].left].eliminated = 1
			self.winners[ctr] = matches[ctr].right
			ctr++
	self.match_count = 0
	return len(self.winners)

def recommit(commitment):
	if not self.players[msg.sender].eliminated:
		self.players[msg.sender].commitment = commitment
		if self.matches[match_count].bit = 1:
			self.matches[match_count].right = msg.sender
			self.matches[match_count].has_revealed = 0
			self.matches[match_count++].bit = 0
		else:
			self.matches[match_count].left = msg.sender
			self.matches[match_count].has_revealed = 0
			self.matches[match_count++].bit = 1
		return(0)
	else:
		return (-1)


def test_callstack():
	return (1)


