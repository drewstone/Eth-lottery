// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

var contract_data = {
  abi: [{"constant":true,"inputs":[],"name":"playerCount","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"addMatch","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"matchCount","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[],"name":"tournamentPot","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"commit","type":"bytes32"}],"name":"addPlayer","outputs":[{"name":"num","type":"uint256"}],"type":"function"},{"inputs":[],"type":"constructor"}],
  binary: "600060e08181526101008290526101208290526101408290526060526101e06040526101608181526101808290526101a08290526101c082905260805260a081905260c081905260048054600160a060020a031990811690915560058290556006805460ff19908116909155600783905560088054831690556009839055600a80549091169055600b829055600c80549091169055600d5560008054600160a060020a03191633178155600281905560018190556003556103e5806100c46000396000f3606060405236156100615760e060020a6000350463302bcc57811461006357806341c0e1b51461006c57806344f838271461009657806379c4264b146101645780638da5cb5b1461016d57806394db0d1c1461017f578063e48e0b0b14610188575b005b6101b660015481565b610061600054600160a060020a039081163391909116141561016257600054600160a060020a0316ff5b6100615b60408051610100810182526000608082810182815260a0840183905260c0840183905260e08401839052835283519081018452818152602081810183815282860184815260608481018681528785018690528789018790528782018790529651805160048054600160a060020a0319908116909217905594810151600555978801516006805460ff19908116909217905597015160075592516008805484169091179055516009559051600a8054909516179093559051600b55600c8054909216909155600d555b565b6101b660025481565b6101c8600054600160a060020a031681565b6101b660035481565b6101b6600435600160a060020a0333166000908152600e6020526040812054819060ff16156101e5576102b9565b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b6103e834106102b957506103e7193401600081111561021f57604051600160a060020a03331690600090839082818181858883f150505050505b600d54600014156102bf576040805160808101825233808252602082810187905260008385018190523460609490940184905260048054600160a060020a0319168417905560058890556006805460ff199081169091556007949094556001600d819055600160a060020a039093168152600e90915292909220805490911690911790555b60018054810190819055600380543401905591505b50919050565b600d54600114156102a4576040805160808101825233808252602082810187905260008385018190523460609490940184905260088054600160a060020a03199081168517825560098a8155600a805460ff199081168255600b9889556002805460018181018355908852600f89528b88206004805482548916600160a060020a039182161783556005805484860155600680549685018054891660ff9889161790556007805460038701558c5494860180548d169585169590951790945589549185019190915596549683018054871697909516969096179093559a54918b0191909155600c54958a01805490951695831695909517909355600d549790910196909655949093168152600e90915292909220805490911690911790556102a461009a56",
  unlinked_binary: "600060e08181526101008290526101208290526101408290526060526101e06040526101608181526101808290526101a08290526101c082905260805260a081905260c081905260048054600160a060020a031990811690915560058290556006805460ff19908116909155600783905560088054831690556009839055600a80549091169055600b829055600c80549091169055600d5560008054600160a060020a03191633178155600281905560018190556003556103e5806100c46000396000f3606060405236156100615760e060020a6000350463302bcc57811461006357806341c0e1b51461006c57806344f838271461009657806379c4264b146101645780638da5cb5b1461016d57806394db0d1c1461017f578063e48e0b0b14610188575b005b6101b660015481565b610061600054600160a060020a039081163391909116141561016257600054600160a060020a0316ff5b6100615b60408051610100810182526000608082810182815260a0840183905260c0840183905260e08401839052835283519081018452818152602081810183815282860184815260608481018681528785018690528789018790528782018790529651805160048054600160a060020a0319908116909217905594810151600555978801516006805460ff19908116909217905597015160075592516008805484169091179055516009559051600a8054909516179093559051600b55600c8054909216909155600d555b565b6101b660025481565b6101c8600054600160a060020a031681565b6101b660035481565b6101b6600435600160a060020a0333166000908152600e6020526040812054819060ff16156101e5576102b9565b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b6103e834106102b957506103e7193401600081111561021f57604051600160a060020a03331690600090839082818181858883f150505050505b600d54600014156102bf576040805160808101825233808252602082810187905260008385018190523460609490940184905260048054600160a060020a0319168417905560058890556006805460ff199081169091556007949094556001600d819055600160a060020a039093168152600e90915292909220805490911690911790555b60018054810190819055600380543401905591505b50919050565b600d54600114156102a4576040805160808101825233808252602082810187905260008385018190523460609490940184905260088054600160a060020a03199081168517825560098a8155600a805460ff199081168255600b9889556002805460018181018355908852600f89528b88206004805482548916600160a060020a039182161783556005805484860155600680549685018054891660ff9889161790556007805460038701558c5494860180548d169585169590951790945589549185019190915596549683018054871697909516969096179093559a54918b0191909155600c54958a01805490951695831695909517909355600d549790910196909655949093168152600e90915292909220805490911690911790556102a461009a56",
  address: "0x649a38576722652dcc59e9acd8d73049e37559fa",
  generated_with: "2.0.4",
  contract_name: "Tournament"
};

function Contract() {
  if (Contract.Pudding == null) {
    throw new Error("Tournament error: Please call load() first before creating new instance of this contract.");
  }

  Contract.Pudding.apply(this, arguments);
};

Contract.load = function(Pudding) {
  Contract.Pudding = Pudding;

  Pudding.whisk(contract_data, Contract);

  // Return itself for backwards compatibility.
  return Contract;
}

Contract.new = function() {
  if (Contract.Pudding == null) {
    throw new Error("Tournament error: Please call load() first before calling new().");
  }

  return Contract.Pudding.new.apply(Contract, arguments);
};

Contract.at = function() {
  if (Contract.Pudding == null) {
    throw new Error("Tournament error: lease call load() first before calling at().");
  }

  return Contract.Pudding.at.apply(Contract, arguments);
};

Contract.deployed = function() {
  if (Contract.Pudding == null) {
    throw new Error("Tournament error: Please call load() first before calling deployed().");
  }

  return Contract.Pudding.deployed.apply(Contract, arguments);
};

if (typeof module != "undefined" && typeof module.exports != "undefined") {
  module.exports = Contract;
} else {
  // There will only be one version of Pudding in the browser,
  // and we can use that.
  window.Tournament = Contract;
}
